{"uid":"e9a7dd8ca42ffc85","name":"test_edit","fullName":"tests.test_edit#test_edit","historyId":"65f16bf3ba35b152446354b19e0b1751","time":{"start":1717776859625,"stop":1717776859625,"duration":0},"status":"broken","statusMessage":"TypeError: Object of type Response is not JSON serializable","statusTrace":"chrome_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"26d13dbc41b69e930b39c13e3e4ea4e3\")>\n\n    @pytest.fixture\n    def logged_in_test(chrome_browser: webdriver):\n        user = setup_test_user()\n        login_response = login_test_user(chrome_browser, user)\n>       setup_user_local_storage(chrome_browser, login_response)\n\ntests/conftest.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:63: in setup_user_local_storage\n    json.dumps(login_response),\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/json/__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/json/encoder.py:200: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/json/encoder.py:258: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.encoder.JSONEncoder object at 0x7ff4fffde960>, o = <Response [200]>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type Response is not JSON serializable\n\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/json/encoder.py:180: TypeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1717776851537,"stop":1717776851557,"duration":20},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"chrome_browser","time":{"start":1717776859625,"stop":1717776859983,"duration":358},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"logged_in_test","time":{"start":1717776859983,"stop":1717776860860,"duration":877},"status":"broken","statusMessage":"TypeError: Object of type Response is not JSON serializable\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1132, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 906, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/python-e2e-localstack-tests/python-e2e-localstack-tests/tests/conftest.py\", line 37, in logged_in_test\n    setup_user_local_storage(chrome_browser, login_response)\n  File \"/home/runner/work/python-e2e-localstack-tests/python-e2e-localstack-tests/tests/conftest.py\", line 63, in setup_user_local_storage\n    json.dumps(login_response),\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/json/__init__.py\", line 231, in dumps\n    return _default_encoder.encode(obj)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/json/encoder.py\", line 200, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/json/encoder.py\", line 258, in iterencode\n    return _iterencode(o, 0)\n           ^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/json/encoder.py\", line 180, in default\n    raise TypeError(f'Object of type {o.__class__.__name__} '\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"testStage":{"status":"broken","statusMessage":"TypeError: Object of type Response is not JSON serializable","statusTrace":"chrome_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"26d13dbc41b69e930b39c13e3e4ea4e3\")>\n\n    @pytest.fixture\n    def logged_in_test(chrome_browser: webdriver):\n        user = setup_test_user()\n        login_response = login_test_user(chrome_browser, user)\n>       setup_user_local_storage(chrome_browser, login_response)\n\ntests/conftest.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:63: in setup_user_local_storage\n    json.dumps(login_response),\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/json/__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/json/encoder.py:200: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/json/encoder.py:258: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.encoder.JSONEncoder object at 0x7ff4fffde960>, o = <Response [200]>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type Response is not JSON serializable\n\n/opt/hostedtoolcache/Python/3.12.1/x64/lib/python3.12/json/encoder.py:180: TypeError","steps":[],"attachments":[{"uid":"6aada9247e5d28fb","name":"log","source":"6aada9247e5d28fb.txt","type":"text/plain","size":2868}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"chrome_browser::0","time":{"start":1717776860883,"stop":1717776860942,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_edit"},{"name":"host","value":"fv-az1249-587"},{"name":"thread","value":"3416-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_edit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":10,"unknown":0,"total":11},"items":[{"uid":"f9bb3c18e4d42142","reportUrl":"https://urszulamaciag.github.io/python-e2e-localstack-tests/6//#testresult/f9bb3c18e4d42142","status":"passed","time":{"start":1717766807053,"stop":1717766809626,"duration":2573}},{"uid":"70916daa24a8b64","reportUrl":"https://urszulamaciag.github.io/python-e2e-localstack-tests/5//#testresult/70916daa24a8b64","status":"passed","time":{"start":1717765031900,"stop":1717765034165,"duration":2265}},{"uid":"77616e31c325c604","reportUrl":"https://urszulamaciag.github.io/python-e2e-localstack-tests/2//#testresult/77616e31c325c604","status":"passed","time":{"start":1717612972930,"stop":1717612975550,"duration":2620}},{"uid":"8aa2f8130b9bc89f","reportUrl":"https://urszulamaciag.github.io/python-e2e-localstack-tests/1//#testresult/8aa2f8130b9bc89f","status":"passed","time":{"start":1715622178057,"stop":1715622180769,"duration":2712}},{"uid":"f52004bc57c20eba","reportUrl":"https://urszulamaciag.github.io/python-e2e-localstack-tests/1//#testresult/f52004bc57c20eba","status":"passed","time":{"start":1715618610355,"stop":1715618612852,"duration":2497}},{"uid":"4315eee87b4387e3","reportUrl":"https://slawekradzyminski.github.io/python-e2e-localstack-tests/26//#testresult/4315eee87b4387e3","status":"passed","time":{"start":1715529066079,"stop":1715529068717,"duration":2638}},{"uid":"96b80df7b489dd81","reportUrl":"https://slawekradzyminski.github.io/python-e2e-localstack-tests/25//#testresult/96b80df7b489dd81","status":"passed","time":{"start":1715528273523,"stop":1715528276262,"duration":2739}},{"uid":"72bb14d6f65bbaf9","reportUrl":"https://slawekradzyminski.github.io/python-e2e-localstack-tests/24//#testresult/72bb14d6f65bbaf9","status":"passed","time":{"start":1715499474259,"stop":1715499476933,"duration":2674}},{"uid":"48cee1be3159aaf9","reportUrl":"https://slawekradzyminski.github.io/python-e2e-localstack-tests/23//#testresult/48cee1be3159aaf9","status":"passed","time":{"start":1715498558574,"stop":1715498561072,"duration":2498}},{"uid":"df11f91b34803806","reportUrl":"https://slawekradzyminski.github.io/python-e2e-localstack-tests/22//#testresult/df11f91b34803806","status":"passed","time":{"start":1715498274073,"stop":1715498276563,"duration":2490}}]},"tags":[]},"source":"e9a7dd8ca42ffc85.json","parameterValues":[]}